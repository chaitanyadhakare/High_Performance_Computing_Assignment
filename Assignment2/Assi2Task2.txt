%%cu

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cuda_runtime.h>

#define col1row2 2048
#define col2 512

using namespace std;

__global__ void matproduct(int *a,int *b, int *c){
    int x = blockIdx.x;
    int y = blockIdx.y;
    int k;

    c[col2*y+x] = 0;
    for(k = 0; k < col1row2 ; k++){
       c[col2*y+x]= c[col2*y+x]+a[col1row2*y+k]*b[col2*k+x];
    } 

}

int main(){
  //#Multiply vector and matrix
  int *h_vector;
  int *h_resultVector;
  int *h_matrix;
  
  int *d_vector;
  int *d_matrix;
  int *d_resultVector;

  h_vector = (int *)malloc(col1row2*sizeof(int));
  h_resultVector = (int *)malloc(col2*sizeof(int));
  h_matrix =  (int *)malloc(col1row2*col2*sizeof(int));

  cudaMalloc((void **)&d_vector, col1row2*sizeof(int));
	cudaMalloc((void **)&d_matrix, col1row2*col2*sizeof(int));
	cudaMalloc((void **)&d_resultVector, col2*sizeof(int));

  srand(time(0));
  for(int i=0; i < col1row2 ; i++){
     for(int j = 0; j < col2 ; j++){
          h_matrix[i*col2+j] = rand() % 4 + 1;
     }
    h_vector[i]=rand()% 4 + 1;
  } 

  //#Copy inputs to device
	cudaMemcpy(d_vector, h_vector, col1row2*sizeof(int), cudaMemcpyHostToDevice);
	cudaMemcpy(d_matrix, h_matrix, col1row2*col2*sizeof(int), cudaMemcpyHostToDevice);

  dim3 grid(col2,1);

  matproduct<<<grid,1>>>(d_vector,d_matrix,d_resultVector);

 	//#Copy result back to host
	cudaMemcpy(h_resultVector, d_resultVector, col2*sizeof(int), cudaMemcpyDeviceToHost);

  cout << "2. Multiply Vector and Matrix:"<<endl;
  cout << "Vector: "<<endl;
  for(int i=0; i < col1row2 ; i++){
      cout<<h_vector[i]<<" ";
  }
  cout<<endl;
  cout << "Matrix: "<<endl;
   for(int i=0; i < col1row2 ; i++){
     cout <<"{";
     for(int j = 0; j < col2 ; j++){
          cout << h_matrix[i*col2+j]<<" ";
     }
    cout <<"},";
    }

  cout << endl << "Result Vector: "<<endl;
    for(int i=0; i < col2 ; i++){
      cout<<h_resultVector[i]<<" ";
    } 


  //#cleanup
   free(h_vector);
   free(h_resultVector);
   free(h_matrix);

   cudaFree(d_vector);
   cudaFree(d_resultVector);
   cudaFree(d_matrix);
}